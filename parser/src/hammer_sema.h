/** \file
 *  This C header file was generated by $ANTLR version 3.1.1
 *
 *     -  From the grammar source file : hammer_sema.gt
 *     -                            On : 2017-10-08 12:48:53
 *     -           for the tree parser : hammer_semaTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The tree parser hammer_sema has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef phammer_sema, which is returned from a call to hammer_semaNew().
 *
 * The methods in phammer_sema are  as follows:
 *
 *  - const hammer::ast::hamfile*      phammer_sema->hamfile(phammer_sema)
 *  - void      phammer_sema->statement(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->target_def_or_rule_call(phammer_sema)
 *  - void      phammer_sema->arguments(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->argument(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->named_expression(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->expression(phammer_sema)
 *  - void      phammer_sema->list_of(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->list_element(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->public_expression(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->expression_a(phammer_sema)
 *  - const hammer::ast::path*      phammer_sema->path(phammer_sema)
 *  - void      phammer_sema->path_impl(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->path_element(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->wildcard(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->wildcard_elem(phammer_sema)
 *  - void      phammer_sema->public_tag(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->rule_invocation(phammer_sema)
 *  - const hammer::ast::feature*      phammer_sema->feature(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->feature_value(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->target(phammer_sema)
 *  - const hammer::ast::path*      phammer_sema->target_impl(phammer_sema)
 *  - void      phammer_sema->target_spec(phammer_sema)
 *  - void      phammer_sema->target_build_request(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->condition(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->condition_condition(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->condition_result(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->logical_or(phammer_sema)
 *  - const hammer::ast::expression*      phammer_sema->logical_and(phammer_sema)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
#ifndef	_hammer_sema_H
#define _hammer_sema_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct hammer_sema_Ctx_struct hammer_sema, * phammer_sema;




#include <hammer/sema/actions.h>
#include <hammer/parscore/identifier.h>
#include <hammer/ast/requirement_set.h>
#include <hammer/ast/path.h>
#include <hammer/ast/feature.h>
#include <hammer/ast/condition.h>

#define SEMA static_cast<const hammer::sema::actions*>(PARSER->super)
#define DECLARE_TYPE(Type, name) Type name ( Type ::allocator_type{SEMA->get_context()});


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#endif


/** Context tracking structure for hammer_sema
 */
struct hammer_sema_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_TREE_PARSER	    pTreeParser;


     const hammer::ast::hamfile* (*hamfile)	(struct hammer_sema_Ctx_struct * ctx);
     void (*statement)	(struct hammer_sema_Ctx_struct * ctx, hammer::ast::statements_t* statements);
     const hammer::ast::expression* (*target_def_or_rule_call)	(struct hammer_sema_Ctx_struct * ctx);
     void (*arguments)	(struct hammer_sema_Ctx_struct * ctx, hammer::ast::expressions_t* args);
     const hammer::ast::expression* (*argument)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::expression* (*named_expression)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::expression* (*expression)	(struct hammer_sema_Ctx_struct * ctx);
     void (*list_of)	(struct hammer_sema_Ctx_struct * ctx, hammer::ast::expressions_t* args);
     const hammer::ast::expression* (*list_element)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::expression* (*public_expression)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::expression* (*expression_a)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::path* (*path)	(struct hammer_sema_Ctx_struct * ctx);
     void (*path_impl)	(struct hammer_sema_Ctx_struct * ctx, hammer::parscore::source_location* root, hammer::ast::expressions_t* elements);
     const hammer::ast::expression* (*path_element)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::expression* (*wildcard)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::expression* (*wildcard_elem)	(struct hammer_sema_Ctx_struct * ctx);
     void (*public_tag)	(struct hammer_sema_Ctx_struct * ctx, hammer::parscore::source_location* tag_loc);
     const hammer::ast::expression* (*rule_invocation)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::feature* (*feature)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::expression* (*feature_value)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::expression* (*target)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::path* (*target_impl)	(struct hammer_sema_Ctx_struct * ctx, hammer::parscore::identifier* target_name, hammer::ast::features_t* build_request);
     void (*target_spec)	(struct hammer_sema_Ctx_struct * ctx, hammer::parscore::identifier* target_name, hammer::ast::features_t* build_request);
     void (*target_build_request)	(struct hammer_sema_Ctx_struct * ctx, hammer::ast::features_t* build_request);
     const hammer::ast::expression* (*condition)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::expression* (*condition_condition)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::expression* (*condition_result)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::expression* (*logical_or)	(struct hammer_sema_Ctx_struct * ctx);
     const hammer::ast::expression* (*logical_and)	(struct hammer_sema_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct hammer_sema_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API phammer_sema hammer_semaNew         (pANTLR3_COMMON_TREE_NODE_STREAM instream);
ANTLR3_API phammer_sema hammer_semaNewSSD      (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the tree parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T__50      50
#define Hamfile      4
#define Explicit      7
#define Feature      14
#define Wildcard      21
#define Slash      26
#define List      13
#define NamedArgument      10
#define STRING_1      32
#define Arguments      8
#define Local      6
#define EmptyArgument      9
#define TargetBuildRequest      20
#define Asterix      30
#define Rule      5
#define Id      25
#define StructureField      12
#define RuleInvocation      16
#define LogicalOr      23
#define COMMENT      35
#define Target      18
#define T__37      37
#define T__38      38
#define T__39      39
#define LogicalAnd      22
#define STRING_ID      33
#define T__36      36
#define Structure      11
#define WS      24
#define DoubleSlash      27
#define EOF      -1
#define TargetSpec      19
#define Condition      15
#define Path      17
#define PublicTag      28
#define STRING_ID1      34
#define T__48      48
#define T__49      49
#define QuestionMark      29
#define T__44      44
#define T__45      45
#define STRING      31
#define T__46      46
#define T__47      47
#define T__40      40
#define T__41      41
#define T__42      42
#define T__43      43
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for hammer_sema
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
