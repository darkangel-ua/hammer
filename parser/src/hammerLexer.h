/** \file
 *  This C header file was generated by $ANTLR version 3.1.1
 *
 *     -  From the grammar source file : hammer.g
 *     -                            On : 2017-09-22 21:36:28
 *     -                 for the lexer : hammerLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer hammerLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef phammerLexer, which is returned from a call to hammerLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in phammerLexer are  as follows:
 *
 *  -  void      phammerLexer->T__34(phammerLexer)
 *  -  void      phammerLexer->T__35(phammerLexer)
 *  -  void      phammerLexer->T__36(phammerLexer)
 *  -  void      phammerLexer->T__37(phammerLexer)
 *  -  void      phammerLexer->T__38(phammerLexer)
 *  -  void      phammerLexer->T__39(phammerLexer)
 *  -  void      phammerLexer->T__40(phammerLexer)
 *  -  void      phammerLexer->T__41(phammerLexer)
 *  -  void      phammerLexer->T__42(phammerLexer)
 *  -  void      phammerLexer->T__43(phammerLexer)
 *  -  void      phammerLexer->T__44(phammerLexer)
 *  -  void      phammerLexer->T__45(phammerLexer)
 *  -  void      phammerLexer->T__46(phammerLexer)
 *  -  void      phammerLexer->T__47(phammerLexer)
 *  -  void      phammerLexer->Slash(phammerLexer)
 *  -  void      phammerLexer->DoubleSlash(phammerLexer)
 *  -  void      phammerLexer->PublicTag(phammerLexer)
 *  -  void      phammerLexer->Local(phammerLexer)
 *  -  void      phammerLexer->Explicit(phammerLexer)
 *  -  void      phammerLexer->QuestionMark(phammerLexer)
 *  -  void      phammerLexer->Asterix(phammerLexer)
 *  -  void      phammerLexer->Id(phammerLexer)
 *  -  void      phammerLexer->STRING(phammerLexer)
 *  -  void      phammerLexer->STRING_ID(phammerLexer)
 *  -  void      phammerLexer->STRING_1(phammerLexer)
 *  -  void      phammerLexer->STRING_ID1(phammerLexer)
 *  -  void      phammerLexer->COMMENT(phammerLexer)
 *  -  void      phammerLexer->WS(phammerLexer)
 *  -  void      phammerLexer->Tokens(phammerLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
#ifndef	_hammerLexer_H
#define _hammerLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct hammerLexer_Ctx_struct hammerLexer, * phammerLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#endif


/** Context tracking structure for hammerLexer
 */
struct hammerLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mT__34)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__35)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__36)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__37)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__38)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__39)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__40)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__41)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__42)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__43)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__44)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__45)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__46)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__47)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mSlash)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mDoubleSlash)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mPublicTag)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mLocal)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mExplicit)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mQuestionMark)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mAsterix)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mId)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mSTRING)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mSTRING_ID)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mSTRING_1)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mSTRING_ID1)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mCOMMENT)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mWS)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct hammerLexer_Ctx_struct * ctx);    const char * (*getGrammarFileName)();
    void	    (*free)   (struct hammerLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API phammerLexer hammerLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API phammerLexer hammerLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define Hamfile      4
#define Explicit      7
#define Feature      14
#define Wildcard      19
#define Slash      24
#define List      13
#define NamedArgument      10
#define STRING_1      30
#define Arguments      8
#define Local      6
#define EmptyArgument      9
#define Asterix      28
#define Rule      5
#define Id      23
#define StructureField      12
#define RuleInvocation      16
#define COMMENT      33
#define Target      18
#define T__37      37
#define T__38      38
#define T__39      39
#define FeatureLogicalOr      21
#define FeatureLogicalAnd      20
#define T__34      34
#define STRING_ID      31
#define T__35      35
#define T__36      36
#define ConditionalFeature      15
#define Structure      11
#define WS      22
#define DoubleSlash      25
#define EOF      -1
#define Path      17
#define PublicTag      26
#define STRING_ID1      32
#define QuestionMark      27
#define T__44      44
#define T__45      45
#define STRING      29
#define T__46      46
#define T__47      47
#define T__40      40
#define T__41      41
#define T__42      42
#define T__43      43
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for hammerLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
