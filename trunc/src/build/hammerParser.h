/** \file
 *  This C header file was generated by $ANTLR version 3.0.1
 *
 *     -  From the grammar source file : hammer.g
 *     -                            On : 2007-11-10 17:15:36
 *     -                for the parser : hammerParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 * View this file with tabs set to 8 (:set ts=8 in gvim) and indent at 4 (:set sw=4 in gvim)
 *
 * The parser hammerParserhas the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef phammerParser, which is returned from a call to hammerParserNew().
 *
 * The entry points for hammerParser are  as follows:
 *
 *  - hammerParser_project_return      phammerParser->project(phammerParser)
 *  - hammerParser_meta_target_return      phammerParser->meta_target(phammerParser)
 *  - hammerParser_project_def_return      phammerParser->project_def(phammerParser)
 *  - hammerParser_lib_return      phammerParser->lib(phammerParser)
 *  - hammerParser_exe_return      phammerParser->exe(phammerParser)
 *  - hammerParser_sources_return      phammerParser->sources(phammerParser)
 *  - hammerParser_jam_some_construct_return      phammerParser->jam_some_construct(phammerParser)
 *  - hammerParser_jam_rule_invoke_top_return      phammerParser->jam_rule_invoke_top(phammerParser)
 *  - hammerParser_jam_lol_return      phammerParser->jam_lol(phammerParser)
 *  - hammerParser_jam_list_return      phammerParser->jam_list(phammerParser)
 *  - hammerParser_jam_arg_return      phammerParser->jam_arg(phammerParser)
 *  - hammerParser_jam_func_return      phammerParser->jam_func(phammerParser)
 *  - hammerParser_jam_var_expand_return      phammerParser->jam_var_expand(phammerParser)
 *  - hammerParser_jam_var_stmt_return      phammerParser->jam_var_stmt(phammerParser)
 *  - hammerParser_jam_expr_return      phammerParser->jam_expr(phammerParser)
 *  - hammerParser_jam_if_return      phammerParser->jam_if(phammerParser)
 *  - hammerParser_jam_cond_expr_return      phammerParser->jam_cond_expr(phammerParser)
 *  - hammerParser_jam_cond_and_or_return      phammerParser->jam_cond_and_or(phammerParser)
 *  - hammerParser_jam_cond_return      phammerParser->jam_cond(phammerParser)
 *  - hammerParser_jam_block_return      phammerParser->jam_block(phammerParser)
 *  - hammerParser_jam_rule_return      phammerParser->jam_rule(phammerParser)
 *  - hammerParser_jam_rule_args_def_return      phammerParser->jam_rule_args_def(phammerParser)
 *  - hammerParser_jam_rule_arg_def_return      phammerParser->jam_rule_arg_def(phammerParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
#ifndef	_hammerParser_H
#define _hammerParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef	WIN32
// Disable: Unreferenced parameter,                - Rules with parameters that are not used
//          constant conditional,                  - ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable        - tree rewrite vairables declared but not needed
//          Unreferenced local variable            - lexer rulle decalres but does not always use _type
//          potentially unitialized variable used  - retval always returned from a rule 
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4701 )
#endif
typedef struct hammerParser_project_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_project_return;

typedef struct hammerParser_meta_target_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_meta_target_return;

typedef struct hammerParser_project_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_project_def_return;

typedef struct hammerParser_lib_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_lib_return;

typedef struct hammerParser_exe_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_exe_return;

typedef struct hammerParser_sources_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_sources_return;

typedef struct hammerParser_jam_some_construct_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_some_construct_return;

typedef struct hammerParser_jam_rule_invoke_top_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_rule_invoke_top_return;

typedef struct hammerParser_jam_lol_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_lol_return;

typedef struct hammerParser_jam_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_list_return;

typedef struct hammerParser_jam_arg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_arg_return;

typedef struct hammerParser_jam_func_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_func_return;

typedef struct hammerParser_jam_var_expand_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_var_expand_return;

typedef struct hammerParser_jam_var_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_var_stmt_return;

typedef struct hammerParser_jam_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_expr_return;

typedef struct hammerParser_jam_if_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_if_return;

typedef struct hammerParser_jam_cond_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_cond_expr_return;

typedef struct hammerParser_jam_cond_and_or_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_cond_and_or_return;

typedef struct hammerParser_jam_cond_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_cond_return;

typedef struct hammerParser_jam_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_block_return;

typedef struct hammerParser_jam_rule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_rule_return;

typedef struct hammerParser_jam_rule_args_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_rule_args_def_return;

typedef struct hammerParser_jam_rule_arg_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;/* @returnScope.ruleReturnMembers() */
    pANTLR3_BASE_TREE	tree;
    /* End @returnScope.ruleReturnMembers() */   
}
    hammerParser_jam_rule_arg_def_return;





/** Context tracking structure for hammerParser
 */
typedef struct hammerParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

    hammerParser_project_return (*project)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_meta_target_return (*meta_target)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_project_def_return (*project_def)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_lib_return (*lib)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_exe_return (*exe)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_sources_return (*sources)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_some_construct_return (*jam_some_construct)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_rule_invoke_top_return (*jam_rule_invoke_top)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_lol_return (*jam_lol)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_list_return (*jam_list)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_arg_return (*jam_arg)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_func_return (*jam_func)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_var_expand_return (*jam_var_expand)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_var_stmt_return (*jam_var_stmt)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_expr_return (*jam_expr)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_if_return (*jam_if)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_cond_expr_return (*jam_cond_expr)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_cond_and_or_return (*jam_cond_and_or)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_cond_return (*jam_cond)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_block_return (*jam_block)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_rule_return (*jam_rule)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_rule_args_def_return (*jam_rule_args_def)	(struct hammerParser_Ctx_struct * ctx);
    hammerParser_jam_rule_arg_def_return (*jam_rule_arg_def)	(struct hammerParser_Ctx_struct * ctx);    unsigned char * (*getGrammarFileName)();
    void	    (*free)   (struct hammerParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
}
    hammerParser, * phammerParser;

/* Function protoypes for the parser functions that external translation units
 * may wish to call.
 */
ANTLR3_API phammerParser hammerParserNew         (pANTLR3_COMMON_TOKEN_STREAM     instream);/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define WS      13
#define EOF      -1
#define ASSIGN      10
#define JAM_STRING      11
#define PROJECT_DEF      5
#define LIB      6
#define PROJECT      4
#define SOURCES      8
#define EXE      7
#define JAM_COMMENT      12
#define ID      9
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

/* End of token definitions for hammerParser
 * =============================================================================
 */
/** \} */

#endif
/* END - Note:Keep extra linefeed to satisfy UNIX systems */
