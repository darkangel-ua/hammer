/** \file
 *  This C header file was generated by $ANTLR version 3.1.1
 *
 *     -  From the grammar source file : hammer.g
 *     -                            On : 2016-11-23 08:33:40
 *     -                 for the lexer : hammerLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer hammerLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef phammerLexer, which is returned from a call to hammerLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in phammerLexer are  as follows:
 *
 *  -  void      phammerLexer->T__30(phammerLexer)
 *  -  void      phammerLexer->T__31(phammerLexer)
 *  -  void      phammerLexer->T__32(phammerLexer)
 *  -  void      phammerLexer->T__33(phammerLexer)
 *  -  void      phammerLexer->T__34(phammerLexer)
 *  -  void      phammerLexer->T__35(phammerLexer)
 *  -  void      phammerLexer->T__36(phammerLexer)
 *  -  void      phammerLexer->T__37(phammerLexer)
 *  -  void      phammerLexer->T__38(phammerLexer)
 *  -  void      phammerLexer->T__39(phammerLexer)
 *  -  void      phammerLexer->SLASH(phammerLexer)
 *  -  void      phammerLexer->PUBLIC_TAG(phammerLexer)
 *  -  void      phammerLexer->ID(phammerLexer)
 *  -  void      phammerLexer->COLON(phammerLexer)
 *  -  void      phammerLexer->EXP_END(phammerLexer)
 *  -  void      phammerLexer->STRING(phammerLexer)
 *  -  void      phammerLexer->STRING_ID(phammerLexer)
 *  -  void      phammerLexer->COMMENT(phammerLexer)
 *  -  void      phammerLexer->WS(phammerLexer)
 *  -  void      phammerLexer->Tokens(phammerLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
#ifndef	_hammerLexer_H
#define _hammerLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct hammerLexer_Ctx_struct hammerLexer, * phammerLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#endif


/** Context tracking structure for hammerLexer
 */
struct hammerLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mT__30)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__31)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__32)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__33)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__34)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__35)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__36)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__37)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__38)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mT__39)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mSLASH)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mPUBLIC_TAG)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mID)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mCOLON)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mEXP_END)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mSTRING)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mSTRING_ID)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mCOMMENT)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mWS)	(struct hammerLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct hammerLexer_Ctx_struct * ctx);    const char * (*getGrammarFileName)();
    void	    (*free)   (struct hammerLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API phammerLexer hammerLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API phammerLexer hammerLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EMPTY_EXPRESSION      14
#define COMMENT      29
#define EXPLICIT_PROJECT_DEF      5
#define T__37      37
#define T__38      38
#define T__39      39
#define T__33      33
#define T__34      34
#define STRING_ID      28
#define T__35      35
#define T__36      36
#define ID      23
#define WS      21
#define EOF      -1
#define T__30      30
#define T__31      31
#define T__32      32
#define NAMED_EXPRESSION      12
#define REQUIREMENT      18
#define PUBLIC_TAG      26
#define PATH_LIKE_SEQ      16
#define SLASH      25
#define TARGET_NAME      9
#define EMPTY_TARGET_NAME      10
#define COLON      24
#define ARGUMENTS      11
#define EXP_END      22
#define REQUIREMENT_SET      17
#define FEATURE      20
#define HAMFILE      4
#define STRING      27
#define CONDITION      19
#define TARGET_REF      8
#define TARGET_DECL_OR_RULE_CALL      7
#define LIST_OF      15
#define EXPRESSION      13
#define IMPLICIT_PROJECT_DEF      6
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for hammerLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
