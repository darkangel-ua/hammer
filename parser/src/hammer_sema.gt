tree grammar hammer_sema;

options { 
        language = C; 
        tokenVocab = hammer;
        ASTLabelType = pANTLR3_BASE_TREE;
}

@header {

#include <hammer/sema/actions.h>
#include <hammer/parscore/identifier.h>
#include <hammer/ast/requirement_set.h>
#include <hammer/ast/path.h>
#include <hammer/ast/feature.h>
#include <hammer/ast/condition.h>

#define SEMA static_cast<hammer::sema::actions*>(PARSER->super)
#define DECLARE_TYPE(Type, name) Type name ( Type ::allocator_type{SEMA->get_context()});
}

hamfile returns [const hammer::ast::hamfile* result]
@init { DECLARE_TYPE(hammer::ast::statements_t, statements); }
	: ^(Hamfile statement[&statements]*) { result = SEMA->on_hamfile(statements); }
        ;
        
statement[hammer::ast::statements_t* statements]
	: top_level_rule_invocation { statements->push_back($top_level_rule_invocation.result); }
	;

top_level_rule_invocation returns[const hammer::ast::statement* result] 
@init { DECLARE_TYPE(hammer::ast::expressions_t, args); 
        hammer::parscore::source_location explicit_tag, local_tag;
}
	: ^(Rule target_def_prefix[&explicit_tag, &local_tag]? name=Id arguments[&args]) { result = SEMA->on_top_level_rule_invocation(explicit_tag, local_tag, $name->getToken($name), args); }
	; 

target_def_prefix [hammer::parscore::source_location* explicit_tag,
		   hammer::parscore::source_location* local_tag]
	: Local { *local_tag = hammer::parscore::source_location($Local->getToken($Local)); }
	| Explicit { *explicit_tag = hammer::parscore::source_location($Explicit->getToken($Explicit)); }
	;
	
arguments[hammer::ast::expressions_t* args]
	: ^(Arguments (argument { args->push_back($argument.result); })* )
        ;

argument returns[const hammer::ast::expression* result]
	: EmptyArgument { result = SEMA->on_empty_expr($EmptyArgument->getToken($EmptyArgument)); }
	| expression { result = $expression.result; }
	| named_argument { result = $named_argument.result; }
	;

named_argument returns[const hammer::ast::expression* result]
	: ^(NamedArgument Id expression { result = SEMA->on_named_expr($Id->getToken($Id), $expression.result); } )
	| ^(NamedArgument Id EmptyArgument { result = SEMA->on_named_expr($Id->getToken($Id), SEMA->on_empty_expr($EmptyArgument->getToken($EmptyArgument))); } )
	;	
	
expression returns[const hammer::ast::expression* result]
@init { DECLARE_TYPE(hammer::ast::expressions_t, args); }
	: list_of[&args] { result = SEMA->on_list_of(args); }
        | target_ref { result = $target_ref.result; }
	| path { result = $path.result; }
	| Id { result = SEMA->on_id($Id->getToken($Id)); }
        | public_expression { result = $public_expression.result; }
        | expression_a { result = $expression_a.result; }
	| rule_invocation { result = $rule_invocation.result; }
//	| target_def_or_rule_call { result = $target_def_or_rule_call.result; }
	;

list_of[hammer::ast::expressions_t* args]
	: ^(List (list_element { args->push_back($list_element.result); })+ )
	;           
list_element returns[const hammer::ast::expression* result]
	: target_ref { result = $target_ref.result; }
	| path { result = $path.result; }
	| Id { result = SEMA->on_id($Id->getToken($Id)); }
        | public_expression { result = $public_expression.result; }
        | expression_a { result = $expression_a.result; }
	| rule_invocation { result = $rule_invocation.result; }
	;
public_expression returns[const hammer::ast::expression* result]
	: ^(PublicTag expression_a) { result = SEMA->on_public_expr($PublicTag->getToken($PublicTag), $expression_a.result); }
	;
expression_a returns[const hammer::ast::expression* result]
	: feature { result = $feature.result; }
	| condition { result = $condition.result; }
	;	
path returns[const hammer::ast::path* result]
@init { DECLARE_TYPE(hammer::ast::expressions_t, elements); 
        hammer::parscore::source_location root; }
	: ^(Path path_impl[&root, &elements]) { result = SEMA->on_path(root, elements); }
	;	

path_impl[hammer::parscore::source_location* root, hammer::ast::expressions_t* elements]
	: Slash { *root = $Slash->getToken($Slash); } (path_element { elements->push_back($path_element.result); })+
	| (path_element { elements->push_back($path_element.result); })+
	;

path_element returns[const hammer::ast::expression* result]
	: Id { result = SEMA->on_id($Id->getToken($Id)); }
	| wildcard { result = $wildcard.result; }
	;

wildcard returns[const hammer::ast::expression* result]
@init { DECLARE_TYPE(hammer::ast::expressions_t, elements); }
	: ^(Wildcard (wildcard_elem { elements.push_back($wildcard_elem.result); })+ { result = SEMA->on_list_of(elements); } )
	;

wildcard_elem returns[const hammer::ast::expression* result]
	: Id { result = SEMA->on_id($Id->getToken($Id)); }
	| QuestionMark { result = SEMA->on_id($QuestionMark->getToken($QuestionMark)); }
	| Asterix { result = SEMA->on_id($Asterix->getToken($Asterix)); }
	;

public_tag[hammer::parscore::source_location* tag_loc] 
	: PublicTag { *tag_loc = hammer::parscore::source_location($PublicTag->getToken($PublicTag)); } 
	;

rule_invocation returns[const hammer::ast::expression* result]
@init { DECLARE_TYPE(hammer::ast::expressions_t, args); }
	: ^(RuleInvocation name=Id arguments[&args]) { result = SEMA->on_rule_invocation($name->getToken($name), args); }
	;

feature returns[const hammer::ast::feature* result]
	: ^(Feature Id feature_value) { result = SEMA->on_feature($Id->getToken($Id), $feature_value.result); }
	;
	
feature_value returns[const hammer::ast::expression* result]
	: Id { result = SEMA->on_id($Id->getToken($Id)); }
	| path { result = $path.result; }
	| target_ref { result = $target_ref.result; }
	;
target_ref returns[const hammer::ast::expression* result]
@init { DECLARE_TYPE(hammer::ast::features_t, build_request); 
        hammer::parscore::identifier target_name; }
	: ^(PublicTag target_ref_impl[&target_name, &build_request]) { result = SEMA->on_target_ref($PublicTag->getToken($PublicTag), $target_ref_impl.result, target_name, build_request); }
	| target_ref_impl[&target_name, &build_request] { result = SEMA->on_target_ref(hammer::parscore::source_location(), $target_ref_impl.result, target_name, build_request); }
	;

target_ref_impl[hammer::parscore::identifier* target_name, 
	    hammer::ast::features_t* build_request]
returns[const hammer::ast::path* result]
	: ^(TargetRef path target_ref_spec[target_name, build_request]?) { result = $path.result; }
	| ^(TargetRef Id target_ref_spec[target_name, build_request]?) { DECLARE_TYPE(hammer::ast::expressions_t, elements); elements.push_back(SEMA->on_id($Id->getToken($Id))); result = SEMA->on_path({}, elements); }
	;
	
target_ref_spec[hammer::parscore::identifier* target_name, 
	    hammer::ast::features_t* build_request]
	: ^(TargetRefSpec Id target_ref_build_request[build_request]?) { *target_name = hammer::parscore::identifier($Id->getToken($Id)); }
	| ^(TargetRefSpec target_ref_build_request[build_request])
	;	
target_ref_build_request[hammer::ast::features_t* build_request]
	: ^(TargetRefBuildRequest (feature { build_request->push_back($feature.result); })+)
	;	
condition returns[const hammer::ast::expression* result]
	: ^(Condition condition_condition condition_result) { result = SEMA->on_condition($condition_condition.result, $condition_result.result); }
	;	
condition_condition returns[const hammer::ast::expression* result]
	: feature { result = $feature.result; }
	| logical_or { result = $logical_or.result; }
	| logical_and { result = $logical_and.result; }
	;
condition_result returns[const hammer::ast::expression* result]
@init { DECLARE_TYPE(hammer::ast::expressions_t, elements); }
	: public_expression { result = $public_expression.result; } // can be only public feature
	| feature { result = $feature.result; }
	| list_of[&elements] { result = SEMA->on_list_of(elements); } // list will contains only features
	;
logical_or returns[const hammer::ast::expression* result]
	: ^(LogicalOr left=condition_condition right=condition_condition) { result = SEMA->on_logical_or($left.result, $right.result); }
	;	
logical_and returns[const hammer::ast::expression* result]
	: ^(LogicalAnd left=condition_condition right=condition_condition)	{ result = SEMA->on_logical_and($left.result, $right.result); }
	;		